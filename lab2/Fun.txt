5> Map = fun M(_, []) -> []; M(F, [H | T]) -> [F(H) | M(F, T)] end.  
#Fun<erl_eval.37.126501267>
6> 
6> Map(fun(X) -> X*2 end, [1,2,3,4]).
[2,4,6,8]


7> Filter = fun F(_, []) -> []; F(P, L) -> [Y || Y <- L, P(Y)] end.
#Fun<erl_eval.37.126501267>
8> Filter(fun K(X) when X rem 3 == 0 -> true; K(_) -> false end, [1, 3, 9, 10]).   
[3,9]
9> Filter(fun K(X) when X rem 3 == 0 -> true; K(_) -> false end, [1, 3, 9, 10, 90]).
[3,9,90]


1> SumDigits = fun(X) ->                                       
1> L = [list_to_integer([Char]) || Char <- integer_to_list(X)],
1> lists:foldl(fun(Y, Acc) -> Y + Acc end, 0, L) end.          
#Fun<erl_eval.7.126501267>
2> SumDigits(121212).
9


1> L = qsort:randomElems(1000000, 1, 1000000).
[902014,631852,811979,38819,653270,796830,913799,28940,
 209912,310590,291660,649219,505518,155741,1599,894141,
 879615,754736,637131,58134,529663,634409,874480,737545,
 638572,315073,782508,6109,871383|...]
2> lists:filter(fun(X) -> case qsort:sumDigits(X) rem 3 == 0 of true -> true; (_) -> false end end, L).
[796830,310590,291660,505518,1599,894141,879615,637131,
 58134,782508,871383,184713,693249,324240,321813,841341,
 894603,951258,379827,514917,45312,852738,713964,148065,
 651132,884457,424428,889287,22587|...]